name: Docker

on:
  push:
    paths:
      - '**/Dockerfile'
      - '**/docker-compose.yml'
      - '**/docker-compose.override.yml'
    branches:
      - main
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/docker-compose.yml'
      - '**/docker-compose.override.yml'
    branches:
      - main

permissions:
  contents: read

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Detect Docker Setup
        id: detect_docker
        run: |
          MODULES=()
          for DIR in $(find . -type f \( -name "Dockerfile" -o -name "docker-compose.yml" -o -name "docker-compose.override.yml" \) | awk -F'/' '{print $2}' | sort -u); do
            MODULES+=("$DIR")
          done
          echo "detected_modules=${MODULES[*]}" >> $GITHUB_ENV

      - name: Define External Images
        id: define_external_images
        run: |
          IMAGES=("image:tag" "image:tag" "image:tag") # Modify as needed
          echo "external_images=${IMAGES[*]}" >> $GITHUB_ENV

      - name: Setup Docker Buildx
        if: env.detected_modules != '' || env.external_images != ''
        uses: docker/setup-buildx-action@v3

      - name: Restore Cached Docker Images
        if: env.detected_modules != '' || env.external_images != ''
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile', '**/docker-compose.yml', '**/docker-compose.override.yml') }}-${{ env.external_images != '' && env.external_images || 'no-external-images' }}
          restore-keys: docker-${{ runner.os }}-

      - name: Load Cached Docker Images
        if: env.detected_modules != '' || env.external_images != ''
        run: |
          IFS=' ' read -r -a MODULES <<< "${{ env.external_images }}"
          for IMAGE in "${MODULES[@]}"; do
            SAFE_NAME=$(echo "$IMAGE" | tr '/:' '_')
            if [[ -f "/tmp/docker-cache/$SAFE_NAME.tar" ]]; then
              docker load -i /tmp/docker-cache/$SAFE_NAME.tar
            fi
          done

      - name: Build and Cache Docker Images for Each Module
        if: env.detected_modules != ''
        run: |
          mkdir -p /tmp/docker-cache
          IFS=' ' read -r -a MODULES <<< "${{ env.detected_modules }}"
          for MODULE in "${MODULES[@]}"; do
            if [[ -f "$MODULE/Dockerfile" ]]; then
              DOCKER_IMAGE_NAME="${MODULE}-app" # Modify as needed
              docker build -t $DOCKER_IMAGE_NAME:latest $MODULE
              docker save -o /tmp/docker-cache/$DOCKER_IMAGE_NAME.tar $DOCKER_IMAGE_NAME:latest
            fi
          done

      - name: Pull & Cache External Docker Images
        if: env.external_images != ''
        run: |
          mkdir -p /tmp/docker-cache
          IFS=' ' read -r -a MODULES <<< "${{ env.external_images }}"
          for IMAGE in "${MODULES[@]}"; do
            SAFE_NAME=$(echo "$IMAGE" | tr '/:' '_')
            if ! docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$IMAGE"; then
              docker pull "$IMAGE"
              docker save -o "/tmp/docker-cache/${SAFE_NAME}.tar" "$IMAGE"
            fi
          done

      - name: Build & Start Containers
        if: env.detected_modules != ''
        run: |
          IFS=' ' read -r -a MODULES <<< "${{ env.detected_modules }}"
          for MODULE in "${MODULES[@]}"; do
            if [[ -f "$MODULE/docker-compose.yml" ]]; then
              if [[ -f "$MODULE/docker-compose.override.yml" ]]; then
                docker-compose -f $MODULE/docker-compose.yml -f $MODULE/docker-compose.override.yml up -d --build
              else
                docker-compose -f $MODULE/docker-compose.yml up -d --build
              fi
            fi
          done

      - name: Cache Docker Images
        if: env.detected_modules != '' || env.external_images != ''
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile', '**/docker-compose.yml', '**/docker-compose.override.yml') }}-${{ env.external_images != '' && env.external_images || 'no-external-images' }}